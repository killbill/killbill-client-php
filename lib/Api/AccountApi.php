<?php
/**
 * AccountApi
 * PHP version 7.1+
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.24.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\RequestOptions;
use Killbill\Client\Swagger\ApiException;
use Killbill\Client\Swagger\Configuration;
use Killbill\Client\Swagger\HeaderSelector;
use Killbill\Client\Swagger\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAccountBlockingState
     *
     * Block an account
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $requestedDate requestedDate (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\BlockingState[]
     */
    public function addAccountBlockingState($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        list($response) = $this->addAccountBlockingStateWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty);
        return $response;
    }

    /**
     * Operation addAccountBlockingStateWithHttpInfo
     *
     * Block an account
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\BlockingState[], HTTP status code, HTTP response headers (array of strings)
     */
    public function addAccountBlockingStateWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\BlockingState[]';
        $request = $this->addAccountBlockingStateRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\BlockingState[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAccountBlockingStateAsync
     *
     * Block an account
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAccountBlockingStateAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        return $this->addAccountBlockingStateAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAccountBlockingStateAsyncWithHttpInfo
     *
     * Block an account
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAccountBlockingStateAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\BlockingState[]';
        $request = $this->addAccountBlockingStateRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAccountBlockingState'
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addAccountBlockingStateRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addAccountBlockingState'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling addAccountBlockingState'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling addAccountBlockingState'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestedDate !== null) {
            $queryParams['requestedDate'] = ObjectSerializer::toQueryValue($requestedDate);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEmail
     *
     * Add account email
     *
     * @param \Killbill\Client\Swagger\Model\AccountEmail $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AccountEmail[]
     */
    public function addEmail($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->addEmailWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation addEmailWithHttpInfo
     *
     * Add account email
     *
     * @param \Killbill\Client\Swagger\Model\AccountEmail $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AccountEmail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function addEmailWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AccountEmail[]';
        $request = $this->addEmailRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AccountEmail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addEmailAsync
     *
     * Add account email
     *
     * @param \Killbill\Client\Swagger\Model\AccountEmail $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmailAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->addEmailAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEmailAsyncWithHttpInfo
     *
     * Add account email
     *
     * @param \Killbill\Client\Swagger\Model\AccountEmail $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmailAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AccountEmail[]';
        $request = $this->addEmailRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEmail'
     *
     * @param \Killbill\Client\Swagger\Model\AccountEmail $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addEmailRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addEmail'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling addEmail'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling addEmail'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation closeAccount
     *
     * Close account
     *
     * @param string $accountId accountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param bool|null $cancelAllSubscriptions cancelAllSubscriptions (optional, default to false)
     * @param bool|null $writeOffUnpaidInvoices writeOffUnpaidInvoices (optional, default to false)
     * @param bool|null $itemAdjustUnpaidInvoices itemAdjustUnpaidInvoices (optional, default to false)
     * @param bool|null $removeFutureNotifications removeFutureNotifications (optional, default to true)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function closeAccount($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions = 'false', $writeOffUnpaidInvoices = 'false', $itemAdjustUnpaidInvoices = 'false', $removeFutureNotifications = 'true', $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->closeAccountWithHttpInfo($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions, $writeOffUnpaidInvoices, $itemAdjustUnpaidInvoices, $removeFutureNotifications, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation closeAccountWithHttpInfo
     *
     * Close account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $cancelAllSubscriptions (optional, default to false)
     * @param bool $writeOffUnpaidInvoices (optional, default to false)
     * @param bool $itemAdjustUnpaidInvoices (optional, default to false)
     * @param bool $removeFutureNotifications (optional, default to true)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeAccountWithHttpInfo($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions = 'false', $writeOffUnpaidInvoices = 'false', $itemAdjustUnpaidInvoices = 'false', $removeFutureNotifications = 'true', $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->closeAccountRequest($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions, $writeOffUnpaidInvoices, $itemAdjustUnpaidInvoices, $removeFutureNotifications, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation closeAccountAsync
     *
     * Close account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $cancelAllSubscriptions (optional, default to false)
     * @param bool $writeOffUnpaidInvoices (optional, default to false)
     * @param bool $itemAdjustUnpaidInvoices (optional, default to false)
     * @param bool $removeFutureNotifications (optional, default to true)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeAccountAsync($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions = 'false', $writeOffUnpaidInvoices = 'false', $itemAdjustUnpaidInvoices = 'false', $removeFutureNotifications = 'true', $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->closeAccountAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions, $writeOffUnpaidInvoices, $itemAdjustUnpaidInvoices, $removeFutureNotifications, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation closeAccountAsyncWithHttpInfo
     *
     * Close account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $cancelAllSubscriptions (optional, default to false)
     * @param bool $writeOffUnpaidInvoices (optional, default to false)
     * @param bool $itemAdjustUnpaidInvoices (optional, default to false)
     * @param bool $removeFutureNotifications (optional, default to true)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeAccountAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions = 'false', $writeOffUnpaidInvoices = 'false', $itemAdjustUnpaidInvoices = 'false', $removeFutureNotifications = 'true', $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->closeAccountRequest($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions, $writeOffUnpaidInvoices, $itemAdjustUnpaidInvoices, $removeFutureNotifications, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'closeAccount'
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $cancelAllSubscriptions (optional, default to false)
     * @param bool $writeOffUnpaidInvoices (optional, default to false)
     * @param bool $itemAdjustUnpaidInvoices (optional, default to false)
     * @param bool $removeFutureNotifications (optional, default to true)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function closeAccountRequest($accountId, $xKillbillCreatedBy, $cancelAllSubscriptions = 'false', $writeOffUnpaidInvoices = 'false', $itemAdjustUnpaidInvoices = 'false', $removeFutureNotifications = 'true', $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling closeAccount'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling closeAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cancelAllSubscriptions !== null) {
            $queryParams['cancelAllSubscriptions'] = ObjectSerializer::toQueryValue($cancelAllSubscriptions);
        }
        // query params
        if ($writeOffUnpaidInvoices !== null) {
            $queryParams['writeOffUnpaidInvoices'] = ObjectSerializer::toQueryValue($writeOffUnpaidInvoices);
        }
        // query params
        if ($itemAdjustUnpaidInvoices !== null) {
            $queryParams['itemAdjustUnpaidInvoices'] = ObjectSerializer::toQueryValue($itemAdjustUnpaidInvoices);
        }
        // query params
        if ($removeFutureNotifications !== null) {
            $queryParams['removeFutureNotifications'] = ObjectSerializer::toQueryValue($removeFutureNotifications);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccount
     *
     * Create account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Account
     */
    public function createAccount($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createAccountWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createAccountWithHttpInfo
     *
     * Create account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account';
        $request = $this->createAccountRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountAsync
     *
     * Create account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createAccountAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountAsyncWithHttpInfo
     *
     * Create account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account';
        $request = $this->createAccountRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccount'
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAccountRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAccount'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccountCustomFields
     *
     * Add custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function createAccountCustomFields($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createAccountCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createAccountCustomFieldsWithHttpInfo
     *
     * Add custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createAccountCustomFieldsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountCustomFieldsAsync
     *
     * Add custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountCustomFieldsAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createAccountCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountCustomFieldsAsyncWithHttpInfo
     *
     * Add custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createAccountCustomFieldsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAccountCustomFieldsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAccountCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createAccountCustomFields'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createAccountCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccountTags
     *
     * Add tags to account
     *
     * @param string[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function createAccountTags($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createAccountTagsWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createAccountTagsWithHttpInfo
     *
     * Add tags to account
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountTagsWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->createAccountTagsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountTagsAsync
     *
     * Add tags to account
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountTagsAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createAccountTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountTagsAsyncWithHttpInfo
     *
     * Add tags to account
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->createAccountTagsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountTags'
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAccountTagsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAccountTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createAccountTags'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createAccountTags'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentMethod
     *
     * Add a payment method
     *
     * @param \Killbill\Client\Swagger\Model\PaymentMethod $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param bool|null $isDefault isDefault (optional, default to false)
     * @param bool|null $payAllUnpaidInvoices payAllUnpaidInvoices (optional, default to false)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\PaymentMethod
     */
    public function createPaymentMethod($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $isDefault = 'false', $payAllUnpaidInvoices = 'false', $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->createPaymentMethodWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $isDefault, $payAllUnpaidInvoices, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation createPaymentMethodWithHttpInfo
     *
     * Add a payment method
     *
     * @param \Killbill\Client\Swagger\Model\PaymentMethod $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $isDefault (optional, default to false)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\PaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentMethodWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $isDefault = 'false', $payAllUnpaidInvoices = 'false', $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod';
        $request = $this->createPaymentMethodRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $isDefault, $payAllUnpaidInvoices, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentMethodAsync
     *
     * Add a payment method
     *
     * @param \Killbill\Client\Swagger\Model\PaymentMethod $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $isDefault (optional, default to false)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentMethodAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $isDefault = 'false', $payAllUnpaidInvoices = 'false', $controlPluginName = null, $pluginProperty = null)
    {
        return $this->createPaymentMethodAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $isDefault, $payAllUnpaidInvoices, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentMethodAsyncWithHttpInfo
     *
     * Add a payment method
     *
     * @param \Killbill\Client\Swagger\Model\PaymentMethod $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $isDefault (optional, default to false)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentMethodAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $isDefault = 'false', $payAllUnpaidInvoices = 'false', $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod';
        $request = $this->createPaymentMethodRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $isDefault, $payAllUnpaidInvoices, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentMethod'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentMethod $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $isDefault (optional, default to false)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentMethodRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $isDefault = 'false', $payAllUnpaidInvoices = 'false', $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createPaymentMethod'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createPaymentMethod'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createPaymentMethod'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/paymentMethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($isDefault !== null) {
            $queryParams['isDefault'] = ObjectSerializer::toQueryValue($isDefault);
        }
        // query params
        if ($payAllUnpaidInvoices !== null) {
            $queryParams['payAllUnpaidInvoices'] = ObjectSerializer::toQueryValue($payAllUnpaidInvoices);
        }
        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountCustomFields
     *
     * Remove custom fields from account
     *
     * @param string $accountId accountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $customField customField (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountCustomFields($accountId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deleteAccountCustomFieldsWithHttpInfo($accountId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deleteAccountCustomFieldsWithHttpInfo
     *
     * Remove custom fields from account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountCustomFieldsWithHttpInfo($accountId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteAccountCustomFieldsRequest($accountId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountCustomFieldsAsync
     *
     * Remove custom fields from account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountCustomFieldsAsync($accountId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deleteAccountCustomFieldsAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountCustomFieldsAsyncWithHttpInfo
     *
     * Remove custom fields from account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountCustomFieldsAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteAccountCustomFieldsRequest($accountId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountCustomFields'
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAccountCustomFieldsRequest($accountId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteAccountCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deleteAccountCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($customField)) {
            $customField = ObjectSerializer::serializeCollection($customField, /*'multi'*/'csv', true);
        }
        if ($customField !== null) {
            $queryParams['customField'] = ObjectSerializer::toQueryValue($customField);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountTags
     *
     * Remove tags from account
     *
     * @param string $accountId accountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $tagDef tagDef (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountTags($accountId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deleteAccountTagsWithHttpInfo($accountId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deleteAccountTagsWithHttpInfo
     *
     * Remove tags from account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountTagsWithHttpInfo($accountId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteAccountTagsRequest($accountId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountTagsAsync
     *
     * Remove tags from account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountTagsAsync($accountId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deleteAccountTagsAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountTagsAsyncWithHttpInfo
     *
     * Remove tags from account
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountTagsAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteAccountTagsRequest($accountId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountTags'
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAccountTagsRequest($accountId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteAccountTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deleteAccountTags'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($tagDef)) {
            $queryParams['tagDef'] = $tagDef;
        } elseif ($tagDef !== null) {
            $queryParams['tagDef'] = ObjectSerializer::toQueryValue($tagDef);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccount
     *
     * Retrieve an account by id
     *
     * @param string $accountId accountId (required)
     * @param bool|null $accountWithBalance accountWithBalance (optional, default to false)
     * @param bool|null $accountWithBalanceAndCBA accountWithBalanceAndCBA (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Account
     */
    public function getAccount($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        list($response) = $this->getAccountWithHttpInfo($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit);
        return $response;
    }

    /**
     * Operation getAccountWithHttpInfo
     *
     * Retrieve an account by id
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountWithHttpInfo($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account';
        $request = $this->getAccountRequest($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountAsync
     *
     * Retrieve an account by id
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsync($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        return $this->getAccountAsyncWithHttpInfo($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAsyncWithHttpInfo
     *
     * Retrieve an account by id
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAsyncWithHttpInfo($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account';
        $request = $this->getAccountRequest($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccount'
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountRequest($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accountWithBalance !== null) {
            $queryParams['accountWithBalance'] = ObjectSerializer::toQueryValue($accountWithBalance);
        }
        // query params
        if ($accountWithBalanceAndCBA !== null) {
            $queryParams['accountWithBalanceAndCBA'] = ObjectSerializer::toQueryValue($accountWithBalanceAndCBA);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountAuditLogs
     *
     * Retrieve audit logs by account id
     *
     * @param string $accountId accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getAccountAuditLogs($accountId)
    {
        list($response) = $this->getAccountAuditLogsWithHttpInfo($accountId);
        return $response;
    }

    /**
     * Operation getAccountAuditLogsWithHttpInfo
     *
     * Retrieve audit logs by account id
     *
     * @param string $accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountAuditLogsWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getAccountAuditLogsRequest($accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountAuditLogsAsync
     *
     * Retrieve audit logs by account id
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAuditLogsAsync($accountId)
    {
        return $this->getAccountAuditLogsAsyncWithHttpInfo($accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAuditLogsAsyncWithHttpInfo
     *
     * Retrieve audit logs by account id
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAuditLogsAsyncWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getAccountAuditLogsRequest($accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountAuditLogs'
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountAuditLogsRequest($accountId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountAuditLogs'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/auditLogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountAuditLogsWithHistory
     *
     * Retrieve account audit logs with history by account id
     *
     * @param string $accountId accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getAccountAuditLogsWithHistory($accountId)
    {
        list($response) = $this->getAccountAuditLogsWithHistoryWithHttpInfo($accountId);
        return $response;
    }

    /**
     * Operation getAccountAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve account audit logs with history by account id
     *
     * @param string $accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountAuditLogsWithHistoryWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getAccountAuditLogsWithHistoryRequest($accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountAuditLogsWithHistoryAsync
     *
     * Retrieve account audit logs with history by account id
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAuditLogsWithHistoryAsync($accountId)
    {
        return $this->getAccountAuditLogsWithHistoryAsyncWithHttpInfo($accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve account audit logs with history by account id
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountAuditLogsWithHistoryAsyncWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getAccountAuditLogsWithHistoryRequest($accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountAuditLogsWithHistory'
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountAuditLogsWithHistoryRequest($accountId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountBundles
     *
     * Retrieve bundles for account
     *
     * @param string $accountId accountId (required)
     * @param string|null $externalKey externalKey (optional)
     * @param string|null $bundlesFilter bundlesFilter (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Bundle[]
     */
    public function getAccountBundles($accountId, $externalKey = null, $bundlesFilter = null, $audit = 'NONE')
    {
        list($response) = $this->getAccountBundlesWithHttpInfo($accountId, $externalKey, $bundlesFilter, $audit);
        return $response;
    }

    /**
     * Operation getAccountBundlesWithHttpInfo
     *
     * Retrieve bundles for account
     *
     * @param string $accountId (required)
     * @param string $externalKey (optional)
     * @param string $bundlesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Bundle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountBundlesWithHttpInfo($accountId, $externalKey = null, $bundlesFilter = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle[]';
        $request = $this->getAccountBundlesRequest($accountId, $externalKey, $bundlesFilter, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Bundle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountBundlesAsync
     *
     * Retrieve bundles for account
     *
     * @param string $accountId (required)
     * @param string $externalKey (optional)
     * @param string $bundlesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBundlesAsync($accountId, $externalKey = null, $bundlesFilter = null, $audit = 'NONE')
    {
        return $this->getAccountBundlesAsyncWithHttpInfo($accountId, $externalKey, $bundlesFilter, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountBundlesAsyncWithHttpInfo
     *
     * Retrieve bundles for account
     *
     * @param string $accountId (required)
     * @param string $externalKey (optional)
     * @param string $bundlesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBundlesAsyncWithHttpInfo($accountId, $externalKey = null, $bundlesFilter = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle[]';
        $request = $this->getAccountBundlesRequest($accountId, $externalKey, $bundlesFilter, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountBundles'
     *
     * @param string $accountId (required)
     * @param string $externalKey (optional)
     * @param string $bundlesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountBundlesRequest($accountId, $externalKey = null, $bundlesFilter = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountBundles'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/bundles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($externalKey !== null) {
            $queryParams['externalKey'] = ObjectSerializer::toQueryValue($externalKey);
        }
        // query params
        if ($bundlesFilter !== null) {
            $queryParams['bundlesFilter'] = ObjectSerializer::toQueryValue($bundlesFilter);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountBundlesPaginated
     *
     * Retrieve paginated bundles for account
     *
     * @param string $accountId accountId (required)
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Bundle[]
     */
    public function getAccountBundlesPaginated($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        list($response) = $this->getAccountBundlesPaginatedWithHttpInfo($accountId, $offset, $limit, $audit);
        return $response;
    }

    /**
     * Operation getAccountBundlesPaginatedWithHttpInfo
     *
     * Retrieve paginated bundles for account
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Bundle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountBundlesPaginatedWithHttpInfo($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle[]';
        $request = $this->getAccountBundlesPaginatedRequest($accountId, $offset, $limit, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Bundle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountBundlesPaginatedAsync
     *
     * Retrieve paginated bundles for account
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBundlesPaginatedAsync($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        return $this->getAccountBundlesPaginatedAsyncWithHttpInfo($accountId, $offset, $limit, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountBundlesPaginatedAsyncWithHttpInfo
     *
     * Retrieve paginated bundles for account
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBundlesPaginatedAsyncWithHttpInfo($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle[]';
        $request = $this->getAccountBundlesPaginatedRequest($accountId, $offset, $limit, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountBundlesPaginated'
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountBundlesPaginatedRequest($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountBundlesPaginated'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/bundles/pagination';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountByKey
     *
     * Retrieve an account by external key
     *
     * @param string $externalKey externalKey (required)
     * @param bool|null $accountWithBalance accountWithBalance (optional, default to false)
     * @param bool|null $accountWithBalanceAndCBA accountWithBalanceAndCBA (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Account
     */
    public function getAccountByKey($externalKey, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        list($response) = $this->getAccountByKeyWithHttpInfo($externalKey, $accountWithBalance, $accountWithBalanceAndCBA, $audit);
        return $response;
    }

    /**
     * Operation getAccountByKeyWithHttpInfo
     *
     * Retrieve an account by external key
     *
     * @param string $externalKey (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountByKeyWithHttpInfo($externalKey, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account';
        $request = $this->getAccountByKeyRequest($externalKey, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountByKeyAsync
     *
     * Retrieve an account by external key
     *
     * @param string $externalKey (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountByKeyAsync($externalKey, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        return $this->getAccountByKeyAsyncWithHttpInfo($externalKey, $accountWithBalance, $accountWithBalanceAndCBA, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountByKeyAsyncWithHttpInfo
     *
     * Retrieve an account by external key
     *
     * @param string $externalKey (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountByKeyAsyncWithHttpInfo($externalKey, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account';
        $request = $this->getAccountByKeyRequest($externalKey, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountByKey'
     *
     * @param string $externalKey (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountByKeyRequest($externalKey, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'externalKey' is set
        if ($externalKey === null || (is_array($externalKey) && count($externalKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalKey when calling getAccountByKey'
            );
        }

        $resourcePath = '/1.0/kb/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($externalKey !== null) {
            $queryParams['externalKey'] = ObjectSerializer::toQueryValue($externalKey);
        }
        // query params
        if ($accountWithBalance !== null) {
            $queryParams['accountWithBalance'] = ObjectSerializer::toQueryValue($accountWithBalance);
        }
        // query params
        if ($accountWithBalanceAndCBA !== null) {
            $queryParams['accountWithBalanceAndCBA'] = ObjectSerializer::toQueryValue($accountWithBalanceAndCBA);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountCustomFields
     *
     * Retrieve account custom fields
     *
     * @param string $accountId accountId (required)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function getAccountCustomFields($accountId, $audit = 'NONE')
    {
        list($response) = $this->getAccountCustomFieldsWithHttpInfo($accountId, $audit);
        return $response;
    }

    /**
     * Operation getAccountCustomFieldsWithHttpInfo
     *
     * Retrieve account custom fields
     *
     * @param string $accountId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountCustomFieldsWithHttpInfo($accountId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getAccountCustomFieldsRequest($accountId, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountCustomFieldsAsync
     *
     * Retrieve account custom fields
     *
     * @param string $accountId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountCustomFieldsAsync($accountId, $audit = 'NONE')
    {
        return $this->getAccountCustomFieldsAsyncWithHttpInfo($accountId, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountCustomFieldsAsyncWithHttpInfo
     *
     * Retrieve account custom fields
     *
     * @param string $accountId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountCustomFieldsAsyncWithHttpInfo($accountId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getAccountCustomFieldsRequest($accountId, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountCustomFields'
     *
     * @param string $accountId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountCustomFieldsRequest($accountId, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountEmailAuditLogsWithHistory
     *
     * Retrieve account email audit logs with history by id
     *
     * @param string $accountId accountId (required)
     * @param string $accountEmailId accountEmailId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getAccountEmailAuditLogsWithHistory($accountId, $accountEmailId)
    {
        list($response) = $this->getAccountEmailAuditLogsWithHistoryWithHttpInfo($accountId, $accountEmailId);
        return $response;
    }

    /**
     * Operation getAccountEmailAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve account email audit logs with history by id
     *
     * @param string $accountId (required)
     * @param string $accountEmailId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountEmailAuditLogsWithHistoryWithHttpInfo($accountId, $accountEmailId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getAccountEmailAuditLogsWithHistoryRequest($accountId, $accountEmailId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountEmailAuditLogsWithHistoryAsync
     *
     * Retrieve account email audit logs with history by id
     *
     * @param string $accountId (required)
     * @param string $accountEmailId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountEmailAuditLogsWithHistoryAsync($accountId, $accountEmailId)
    {
        return $this->getAccountEmailAuditLogsWithHistoryAsyncWithHttpInfo($accountId, $accountEmailId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountEmailAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve account email audit logs with history by id
     *
     * @param string $accountId (required)
     * @param string $accountEmailId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountEmailAuditLogsWithHistoryAsyncWithHttpInfo($accountId, $accountEmailId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getAccountEmailAuditLogsWithHistoryRequest($accountId, $accountEmailId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountEmailAuditLogsWithHistory'
     *
     * @param string $accountId (required)
     * @param string $accountEmailId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountEmailAuditLogsWithHistoryRequest($accountId, $accountEmailId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountEmailAuditLogsWithHistory'
            );
        }
        // verify the required parameter 'accountEmailId' is set
        if ($accountEmailId === null || (is_array($accountEmailId) && count($accountEmailId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountEmailId when calling getAccountEmailAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/emails/{accountEmailId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($accountEmailId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountEmailId' . '}',
                ObjectSerializer::toPathValue($accountEmailId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountTags
     *
     * Retrieve account tags
     *
     * @param string $accountId accountId (required)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function getAccountTags($accountId, $includedDeleted = 'false', $audit = 'NONE')
    {
        list($response) = $this->getAccountTagsWithHttpInfo($accountId, $includedDeleted, $audit);
        return $response;
    }

    /**
     * Operation getAccountTagsWithHttpInfo
     *
     * Retrieve account tags
     *
     * @param string $accountId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountTagsWithHttpInfo($accountId, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getAccountTagsRequest($accountId, $includedDeleted, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountTagsAsync
     *
     * Retrieve account tags
     *
     * @param string $accountId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTagsAsync($accountId, $includedDeleted = 'false', $audit = 'NONE')
    {
        return $this->getAccountTagsAsyncWithHttpInfo($accountId, $includedDeleted, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountTagsAsyncWithHttpInfo
     *
     * Retrieve account tags
     *
     * @param string $accountId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTagsAsyncWithHttpInfo($accountId, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getAccountTagsRequest($accountId, $includedDeleted, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountTags'
     *
     * @param string $accountId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountTagsRequest($accountId, $includedDeleted = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountTags'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountTimeline
     *
     * Retrieve account timeline
     *
     * @param string $accountId accountId (required)
     * @param bool|null $parallel parallel (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AccountTimeline
     */
    public function getAccountTimeline($accountId, $parallel = 'false', $audit = 'NONE')
    {
        list($response) = $this->getAccountTimelineWithHttpInfo($accountId, $parallel, $audit);
        return $response;
    }

    /**
     * Operation getAccountTimelineWithHttpInfo
     *
     * Retrieve account timeline
     *
     * @param string $accountId (required)
     * @param bool $parallel (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AccountTimeline, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountTimelineWithHttpInfo($accountId, $parallel = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\AccountTimeline';
        $request = $this->getAccountTimelineRequest($accountId, $parallel, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AccountTimeline',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountTimelineAsync
     *
     * Retrieve account timeline
     *
     * @param string $accountId (required)
     * @param bool $parallel (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTimelineAsync($accountId, $parallel = 'false', $audit = 'NONE')
    {
        return $this->getAccountTimelineAsyncWithHttpInfo($accountId, $parallel, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountTimelineAsyncWithHttpInfo
     *
     * Retrieve account timeline
     *
     * @param string $accountId (required)
     * @param bool $parallel (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountTimelineAsyncWithHttpInfo($accountId, $parallel = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\AccountTimeline';
        $request = $this->getAccountTimelineRequest($accountId, $parallel, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountTimeline'
     *
     * @param string $accountId (required)
     * @param bool $parallel (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountTimelineRequest($accountId, $parallel = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountTimeline'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/timeline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parallel !== null) {
            $queryParams['parallel'] = ObjectSerializer::toQueryValue($parallel);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccounts
     *
     * List accounts
     *
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param bool|null $accountWithBalance accountWithBalance (optional, default to false)
     * @param bool|null $accountWithBalanceAndCBA accountWithBalanceAndCBA (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Account[]
     */
    public function getAccounts($offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        list($response) = $this->getAccountsWithHttpInfo($offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit);
        return $response;
    }

    /**
     * Operation getAccountsWithHttpInfo
     *
     * List accounts
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountsWithHttpInfo($offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account[]';
        $request = $this->getAccountsRequest($offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Account[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountsAsync
     *
     * List accounts
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsAsync($offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        return $this->getAccountsAsyncWithHttpInfo($offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountsAsyncWithHttpInfo
     *
     * List accounts
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountsAsyncWithHttpInfo($offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account[]';
        $request = $this->getAccountsRequest($offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccounts'
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountsRequest($offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {

        $resourcePath = '/1.0/kb/accounts/pagination';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($accountWithBalance !== null) {
            $queryParams['accountWithBalance'] = ObjectSerializer::toQueryValue($accountWithBalance);
        }
        // query params
        if ($accountWithBalanceAndCBA !== null) {
            $queryParams['accountWithBalanceAndCBA'] = ObjectSerializer::toQueryValue($accountWithBalanceAndCBA);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllCustomFields
     *
     * Retrieve account customFields
     *
     * @param string $accountId accountId (required)
     * @param string|null $objectType objectType (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function getAllCustomFields($accountId, $objectType = null, $audit = 'NONE')
    {
        list($response) = $this->getAllCustomFieldsWithHttpInfo($accountId, $objectType, $audit);
        return $response;
    }

    /**
     * Operation getAllCustomFieldsWithHttpInfo
     *
     * Retrieve account customFields
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllCustomFieldsWithHttpInfo($accountId, $objectType = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getAllCustomFieldsRequest($accountId, $objectType, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllCustomFieldsAsync
     *
     * Retrieve account customFields
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCustomFieldsAsync($accountId, $objectType = null, $audit = 'NONE')
    {
        return $this->getAllCustomFieldsAsyncWithHttpInfo($accountId, $objectType, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllCustomFieldsAsyncWithHttpInfo
     *
     * Retrieve account customFields
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCustomFieldsAsyncWithHttpInfo($accountId, $objectType = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getAllCustomFieldsRequest($accountId, $objectType, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllCustomFields'
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllCustomFieldsRequest($accountId, $objectType = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAllCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/allCustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($objectType !== null) {
            $queryParams['objectType'] = ObjectSerializer::toQueryValue($objectType);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllTags
     *
     * Retrieve account tags
     *
     * @param string $accountId accountId (required)
     * @param string|null $objectType objectType (optional)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function getAllTags($accountId, $objectType = null, $includedDeleted = 'false', $audit = 'NONE')
    {
        list($response) = $this->getAllTagsWithHttpInfo($accountId, $objectType, $includedDeleted, $audit);
        return $response;
    }

    /**
     * Operation getAllTagsWithHttpInfo
     *
     * Retrieve account tags
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllTagsWithHttpInfo($accountId, $objectType = null, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getAllTagsRequest($accountId, $objectType, $includedDeleted, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllTagsAsync
     *
     * Retrieve account tags
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllTagsAsync($accountId, $objectType = null, $includedDeleted = 'false', $audit = 'NONE')
    {
        return $this->getAllTagsAsyncWithHttpInfo($accountId, $objectType, $includedDeleted, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllTagsAsyncWithHttpInfo
     *
     * Retrieve account tags
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllTagsAsyncWithHttpInfo($accountId, $objectType = null, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getAllTagsRequest($accountId, $objectType, $includedDeleted, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllTags'
     *
     * @param string $accountId (required)
     * @param string $objectType (optional)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllTagsRequest($accountId, $objectType = null, $includedDeleted = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAllTags'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/allTags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($objectType !== null) {
            $queryParams['objectType'] = ObjectSerializer::toQueryValue($objectType);
        }
        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBlockingStateAuditLogsWithHistory
     *
     * Retrieve blocking state audit logs with history by id
     *
     * @param string $blockingId blockingId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getBlockingStateAuditLogsWithHistory($blockingId)
    {
        list($response) = $this->getBlockingStateAuditLogsWithHistoryWithHttpInfo($blockingId);
        return $response;
    }

    /**
     * Operation getBlockingStateAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve blocking state audit logs with history by id
     *
     * @param string $blockingId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBlockingStateAuditLogsWithHistoryWithHttpInfo($blockingId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getBlockingStateAuditLogsWithHistoryRequest($blockingId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBlockingStateAuditLogsWithHistoryAsync
     *
     * Retrieve blocking state audit logs with history by id
     *
     * @param string $blockingId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockingStateAuditLogsWithHistoryAsync($blockingId)
    {
        return $this->getBlockingStateAuditLogsWithHistoryAsyncWithHttpInfo($blockingId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBlockingStateAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve blocking state audit logs with history by id
     *
     * @param string $blockingId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockingStateAuditLogsWithHistoryAsyncWithHttpInfo($blockingId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getBlockingStateAuditLogsWithHistoryRequest($blockingId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBlockingStateAuditLogsWithHistory'
     *
     * @param string $blockingId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBlockingStateAuditLogsWithHistoryRequest($blockingId)
    {
        // verify the required parameter 'blockingId' is set
        if ($blockingId === null || (is_array($blockingId) && count($blockingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockingId when calling getBlockingStateAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/accounts/block/{blockingId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($blockingId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockingId' . '}',
                ObjectSerializer::toPathValue($blockingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBlockingStates
     *
     * Retrieve blocking states for account
     *
     * @param string $accountId accountId (required)
     * @param string[]|null $blockingStateTypes blockingStateTypes (optional)
     * @param string[]|null $blockingStateSvcs blockingStateSvcs (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\BlockingState[]
     */
    public function getBlockingStates($accountId, $blockingStateTypes = null, $blockingStateSvcs = null, $audit = 'NONE')
    {
        list($response) = $this->getBlockingStatesWithHttpInfo($accountId, $blockingStateTypes, $blockingStateSvcs, $audit);
        return $response;
    }

    /**
     * Operation getBlockingStatesWithHttpInfo
     *
     * Retrieve blocking states for account
     *
     * @param string $accountId (required)
     * @param string[] $blockingStateTypes (optional)
     * @param string[] $blockingStateSvcs (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\BlockingState[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBlockingStatesWithHttpInfo($accountId, $blockingStateTypes = null, $blockingStateSvcs = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\BlockingState[]';
        $request = $this->getBlockingStatesRequest($accountId, $blockingStateTypes, $blockingStateSvcs, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\BlockingState[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBlockingStatesAsync
     *
     * Retrieve blocking states for account
     *
     * @param string $accountId (required)
     * @param string[] $blockingStateTypes (optional)
     * @param string[] $blockingStateSvcs (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockingStatesAsync($accountId, $blockingStateTypes = null, $blockingStateSvcs = null, $audit = 'NONE')
    {
        return $this->getBlockingStatesAsyncWithHttpInfo($accountId, $blockingStateTypes, $blockingStateSvcs, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBlockingStatesAsyncWithHttpInfo
     *
     * Retrieve blocking states for account
     *
     * @param string $accountId (required)
     * @param string[] $blockingStateTypes (optional)
     * @param string[] $blockingStateSvcs (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockingStatesAsyncWithHttpInfo($accountId, $blockingStateTypes = null, $blockingStateSvcs = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\BlockingState[]';
        $request = $this->getBlockingStatesRequest($accountId, $blockingStateTypes, $blockingStateSvcs, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBlockingStates'
     *
     * @param string $accountId (required)
     * @param string[] $blockingStateTypes (optional)
     * @param string[] $blockingStateSvcs (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBlockingStatesRequest($accountId, $blockingStateTypes = null, $blockingStateSvcs = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getBlockingStates'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($blockingStateTypes)) {
            $blockingStateTypes = ObjectSerializer::serializeCollection($blockingStateTypes, /*'multi'*/'csv', true);
        }
        if ($blockingStateTypes !== null) {
            $queryParams['blockingStateTypes'] = ObjectSerializer::toQueryValue($blockingStateTypes);
        }
        // query params
        if (is_array($blockingStateSvcs)) {
            $blockingStateSvcs = ObjectSerializer::serializeCollection($blockingStateSvcs, /*'multi'*/'csv', true);
        }
        if ($blockingStateSvcs !== null) {
            $queryParams['blockingStateSvcs'] = ObjectSerializer::toQueryValue($blockingStateSvcs);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChildrenAccounts
     *
     * List children accounts
     *
     * @param string $accountId accountId (required)
     * @param bool|null $accountWithBalance accountWithBalance (optional, default to false)
     * @param bool|null $accountWithBalanceAndCBA accountWithBalanceAndCBA (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Account[]
     */
    public function getChildrenAccounts($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        list($response) = $this->getChildrenAccountsWithHttpInfo($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit);
        return $response;
    }

    /**
     * Operation getChildrenAccountsWithHttpInfo
     *
     * List children accounts
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChildrenAccountsWithHttpInfo($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account[]';
        $request = $this->getChildrenAccountsRequest($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Account[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChildrenAccountsAsync
     *
     * List children accounts
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChildrenAccountsAsync($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        return $this->getChildrenAccountsAsyncWithHttpInfo($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChildrenAccountsAsyncWithHttpInfo
     *
     * List children accounts
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChildrenAccountsAsyncWithHttpInfo($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account[]';
        $request = $this->getChildrenAccountsRequest($accountId, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChildrenAccounts'
     *
     * @param string $accountId (required)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChildrenAccountsRequest($accountId, $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getChildrenAccounts'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/children';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accountWithBalance !== null) {
            $queryParams['accountWithBalance'] = ObjectSerializer::toQueryValue($accountWithBalance);
        }
        // query params
        if ($accountWithBalanceAndCBA !== null) {
            $queryParams['accountWithBalanceAndCBA'] = ObjectSerializer::toQueryValue($accountWithBalanceAndCBA);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmails
     *
     * Retrieve an account emails
     *
     * @param string $accountId accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AccountEmail[]
     */
    public function getEmails($accountId)
    {
        list($response) = $this->getEmailsWithHttpInfo($accountId);
        return $response;
    }

    /**
     * Operation getEmailsWithHttpInfo
     *
     * Retrieve an account emails
     *
     * @param string $accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AccountEmail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailsWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AccountEmail[]';
        $request = $this->getEmailsRequest($accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AccountEmail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailsAsync
     *
     * Retrieve an account emails
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailsAsync($accountId)
    {
        return $this->getEmailsAsyncWithHttpInfo($accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailsAsyncWithHttpInfo
     *
     * Retrieve an account emails
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailsAsyncWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AccountEmail[]';
        $request = $this->getEmailsRequest($accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmails'
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailsRequest($accountId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getEmails'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicePayments
     *
     * Retrieve account invoice payments
     *
     * @param string $accountId accountId (required)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param bool|null $withAttempts withAttempts (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\InvoicePayment[]
     */
    public function getInvoicePayments($accountId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getInvoicePaymentsWithHttpInfo($accountId, $withPluginInfo, $withAttempts, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getInvoicePaymentsWithHttpInfo
     *
     * Retrieve account invoice payments
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\InvoicePayment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicePaymentsWithHttpInfo($accountId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\InvoicePayment[]';
        $request = $this->getInvoicePaymentsRequest($accountId, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\InvoicePayment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicePaymentsAsync
     *
     * Retrieve account invoice payments
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicePaymentsAsync($accountId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getInvoicePaymentsAsyncWithHttpInfo($accountId, $withPluginInfo, $withAttempts, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicePaymentsAsyncWithHttpInfo
     *
     * Retrieve account invoice payments
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicePaymentsAsyncWithHttpInfo($accountId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\InvoicePayment[]';
        $request = $this->getInvoicePaymentsRequest($accountId, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicePayments'
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoicePaymentsRequest($accountId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInvoicePayments'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/invoicePayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if ($withAttempts !== null) {
            $queryParams['withAttempts'] = ObjectSerializer::toQueryValue($withAttempts);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesForAccount
     *
     * Retrieve account invoices
     *
     * @param string $accountId accountId (required)
     * @param \DateTime|null $startDate startDate (optional)
     * @param \DateTime|null $endDate endDate (optional)
     * @param bool|null $withMigrationInvoices withMigrationInvoices (optional, default to false)
     * @param bool|null $unpaidInvoicesOnly unpaidInvoicesOnly (optional, default to false)
     * @param bool|null $includeVoidedInvoices includeVoidedInvoices (optional, default to false)
     * @param bool|null $includeInvoiceComponents includeInvoiceComponents (optional, default to false)
     * @param string|null $invoicesFilter invoicesFilter (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Invoice[]
     */
    public function getInvoicesForAccount($accountId, $startDate = null, $endDate = null, $withMigrationInvoices = 'false', $unpaidInvoicesOnly = 'false', $includeVoidedInvoices = 'false', $includeInvoiceComponents = 'false', $invoicesFilter = null, $audit = 'NONE')
    {
        list($response) = $this->getInvoicesForAccountWithHttpInfo($accountId, $startDate, $endDate, $withMigrationInvoices, $unpaidInvoicesOnly, $includeVoidedInvoices, $includeInvoiceComponents, $invoicesFilter, $audit);
        return $response;
    }

    /**
     * Operation getInvoicesForAccountWithHttpInfo
     *
     * Retrieve account invoices
     *
     * @param string $accountId (required)
     * @param \DateTime $startDate (optional)
     * @param \DateTime $endDate (optional)
     * @param bool $withMigrationInvoices (optional, default to false)
     * @param bool $unpaidInvoicesOnly (optional, default to false)
     * @param bool $includeVoidedInvoices (optional, default to false)
     * @param bool $includeInvoiceComponents (optional, default to false)
     * @param string $invoicesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesForAccountWithHttpInfo($accountId, $startDate = null, $endDate = null, $withMigrationInvoices = 'false', $unpaidInvoicesOnly = 'false', $includeVoidedInvoices = 'false', $includeInvoiceComponents = 'false', $invoicesFilter = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Invoice[]';
        $request = $this->getInvoicesForAccountRequest($accountId, $startDate, $endDate, $withMigrationInvoices, $unpaidInvoicesOnly, $includeVoidedInvoices, $includeInvoiceComponents, $invoicesFilter, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesForAccountAsync
     *
     * Retrieve account invoices
     *
     * @param string $accountId (required)
     * @param \DateTime $startDate (optional)
     * @param \DateTime $endDate (optional)
     * @param bool $withMigrationInvoices (optional, default to false)
     * @param bool $unpaidInvoicesOnly (optional, default to false)
     * @param bool $includeVoidedInvoices (optional, default to false)
     * @param bool $includeInvoiceComponents (optional, default to false)
     * @param string $invoicesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesForAccountAsync($accountId, $startDate = null, $endDate = null, $withMigrationInvoices = 'false', $unpaidInvoicesOnly = 'false', $includeVoidedInvoices = 'false', $includeInvoiceComponents = 'false', $invoicesFilter = null, $audit = 'NONE')
    {
        return $this->getInvoicesForAccountAsyncWithHttpInfo($accountId, $startDate, $endDate, $withMigrationInvoices, $unpaidInvoicesOnly, $includeVoidedInvoices, $includeInvoiceComponents, $invoicesFilter, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesForAccountAsyncWithHttpInfo
     *
     * Retrieve account invoices
     *
     * @param string $accountId (required)
     * @param \DateTime $startDate (optional)
     * @param \DateTime $endDate (optional)
     * @param bool $withMigrationInvoices (optional, default to false)
     * @param bool $unpaidInvoicesOnly (optional, default to false)
     * @param bool $includeVoidedInvoices (optional, default to false)
     * @param bool $includeInvoiceComponents (optional, default to false)
     * @param string $invoicesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesForAccountAsyncWithHttpInfo($accountId, $startDate = null, $endDate = null, $withMigrationInvoices = 'false', $unpaidInvoicesOnly = 'false', $includeVoidedInvoices = 'false', $includeInvoiceComponents = 'false', $invoicesFilter = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Invoice[]';
        $request = $this->getInvoicesForAccountRequest($accountId, $startDate, $endDate, $withMigrationInvoices, $unpaidInvoicesOnly, $includeVoidedInvoices, $includeInvoiceComponents, $invoicesFilter, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesForAccount'
     *
     * @param string $accountId (required)
     * @param \DateTime $startDate (optional)
     * @param \DateTime $endDate (optional)
     * @param bool $withMigrationInvoices (optional, default to false)
     * @param bool $unpaidInvoicesOnly (optional, default to false)
     * @param bool $includeVoidedInvoices (optional, default to false)
     * @param bool $includeInvoiceComponents (optional, default to false)
     * @param string $invoicesFilter (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoicesForAccountRequest($accountId, $startDate = null, $endDate = null, $withMigrationInvoices = 'false', $unpaidInvoicesOnly = 'false', $includeVoidedInvoices = 'false', $includeInvoiceComponents = 'false', $invoicesFilter = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInvoicesForAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($startDate !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($startDate);
        }
        // query params
        if ($endDate !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($endDate);
        }
        // query params
        if ($withMigrationInvoices !== null) {
            $queryParams['withMigrationInvoices'] = ObjectSerializer::toQueryValue($withMigrationInvoices);
        }
        // query params
        if ($unpaidInvoicesOnly !== null) {
            $queryParams['unpaidInvoicesOnly'] = ObjectSerializer::toQueryValue($unpaidInvoicesOnly);
        }
        // query params
        if ($includeVoidedInvoices !== null) {
            $queryParams['includeVoidedInvoices'] = ObjectSerializer::toQueryValue($includeVoidedInvoices);
        }
        // query params
        if ($includeInvoiceComponents !== null) {
            $queryParams['includeInvoiceComponents'] = ObjectSerializer::toQueryValue($includeInvoiceComponents);
        }
        // query params
        if ($invoicesFilter !== null) {
            $queryParams['invoicesFilter'] = ObjectSerializer::toQueryValue($invoicesFilter);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesForAccountPaginated
     *
     * Retrieve paginated invoices for account
     *
     * @param string $accountId accountId (required)
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Invoice[]
     */
    public function getInvoicesForAccountPaginated($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        list($response) = $this->getInvoicesForAccountPaginatedWithHttpInfo($accountId, $offset, $limit, $audit);
        return $response;
    }

    /**
     * Operation getInvoicesForAccountPaginatedWithHttpInfo
     *
     * Retrieve paginated invoices for account
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesForAccountPaginatedWithHttpInfo($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Invoice[]';
        $request = $this->getInvoicesForAccountPaginatedRequest($accountId, $offset, $limit, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesForAccountPaginatedAsync
     *
     * Retrieve paginated invoices for account
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesForAccountPaginatedAsync($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        return $this->getInvoicesForAccountPaginatedAsyncWithHttpInfo($accountId, $offset, $limit, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesForAccountPaginatedAsyncWithHttpInfo
     *
     * Retrieve paginated invoices for account
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesForAccountPaginatedAsyncWithHttpInfo($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Invoice[]';
        $request = $this->getInvoicesForAccountPaginatedRequest($accountId, $offset, $limit, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesForAccountPaginated'
     *
     * @param string $accountId (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoicesForAccountPaginatedRequest($accountId, $offset = '0', $limit = '100', $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInvoicesForAccountPaginated'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/invoices/pagination';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOverdueAccount
     *
     * Retrieve overdue state for account
     *
     * @param string $accountId accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\OverdueState
     */
    public function getOverdueAccount($accountId)
    {
        list($response) = $this->getOverdueAccountWithHttpInfo($accountId);
        return $response;
    }

    /**
     * Operation getOverdueAccountWithHttpInfo
     *
     * Retrieve overdue state for account
     *
     * @param string $accountId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\OverdueState, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOverdueAccountWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\OverdueState';
        $request = $this->getOverdueAccountRequest($accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\OverdueState',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOverdueAccountAsync
     *
     * Retrieve overdue state for account
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOverdueAccountAsync($accountId)
    {
        return $this->getOverdueAccountAsyncWithHttpInfo($accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOverdueAccountAsyncWithHttpInfo
     *
     * Retrieve overdue state for account
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOverdueAccountAsyncWithHttpInfo($accountId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\OverdueState';
        $request = $this->getOverdueAccountRequest($accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOverdueAccount'
     *
     * @param string $accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOverdueAccountRequest($accountId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getOverdueAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/overdue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodsForAccount
     *
     * Retrieve account payment methods
     *
     * @param string $accountId accountId (required)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\PaymentMethod[]
     */
    public function getPaymentMethodsForAccount($accountId, $withPluginInfo = 'false', $includedDeleted = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentMethodsForAccountWithHttpInfo($accountId, $withPluginInfo, $includedDeleted, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentMethodsForAccountWithHttpInfo
     *
     * Retrieve account payment methods
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $includedDeleted (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\PaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodsForAccountWithHttpInfo($accountId, $withPluginInfo = 'false', $includedDeleted = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod[]';
        $request = $this->getPaymentMethodsForAccountRequest($accountId, $withPluginInfo, $includedDeleted, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodsForAccountAsync
     *
     * Retrieve account payment methods
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $includedDeleted (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodsForAccountAsync($accountId, $withPluginInfo = 'false', $includedDeleted = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentMethodsForAccountAsyncWithHttpInfo($accountId, $withPluginInfo, $includedDeleted, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodsForAccountAsyncWithHttpInfo
     *
     * Retrieve account payment methods
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $includedDeleted (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodsForAccountAsyncWithHttpInfo($accountId, $withPluginInfo = 'false', $includedDeleted = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod[]';
        $request = $this->getPaymentMethodsForAccountRequest($accountId, $withPluginInfo, $includedDeleted, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodsForAccount'
     *
     * @param string $accountId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $includedDeleted (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodsForAccountRequest($accountId, $withPluginInfo = 'false', $includedDeleted = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getPaymentMethodsForAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/paymentMethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentsForAccount
     *
     * Retrieve account payments
     *
     * @param string $accountId accountId (required)
     * @param bool|null $withAttempts withAttempts (optional, default to false)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment[]
     */
    public function getPaymentsForAccount($accountId, $withAttempts = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentsForAccountWithHttpInfo($accountId, $withAttempts, $withPluginInfo, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentsForAccountWithHttpInfo
     *
     * Retrieve account payments
     *
     * @param string $accountId (required)
     * @param bool $withAttempts (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsForAccountWithHttpInfo($accountId, $withAttempts = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment[]';
        $request = $this->getPaymentsForAccountRequest($accountId, $withAttempts, $withPluginInfo, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsForAccountAsync
     *
     * Retrieve account payments
     *
     * @param string $accountId (required)
     * @param bool $withAttempts (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsForAccountAsync($accountId, $withAttempts = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentsForAccountAsyncWithHttpInfo($accountId, $withAttempts, $withPluginInfo, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsForAccountAsyncWithHttpInfo
     *
     * Retrieve account payments
     *
     * @param string $accountId (required)
     * @param bool $withAttempts (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsForAccountAsyncWithHttpInfo($accountId, $withAttempts = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment[]';
        $request = $this->getPaymentsForAccountRequest($accountId, $withAttempts, $withPluginInfo, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentsForAccount'
     *
     * @param string $accountId (required)
     * @param bool $withAttempts (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentsForAccountRequest($accountId, $withAttempts = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getPaymentsForAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($withAttempts !== null) {
            $queryParams['withAttempts'] = ObjectSerializer::toQueryValue($withAttempts);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyAccountCustomFields
     *
     * Modify custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifyAccountCustomFields($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->modifyAccountCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation modifyAccountCustomFieldsWithHttpInfo
     *
     * Modify custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyAccountCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifyAccountCustomFieldsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation modifyAccountCustomFieldsAsync
     *
     * Modify custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAccountCustomFieldsAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->modifyAccountCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyAccountCustomFieldsAsyncWithHttpInfo
     *
     * Modify custom fields to account
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAccountCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifyAccountCustomFieldsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyAccountCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyAccountCustomFieldsRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyAccountCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling modifyAccountCustomFields'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling modifyAccountCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payAllInvoices
     *
     * Trigger a payment for all unpaid invoices
     *
     * @param string $accountId accountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $paymentMethodId paymentMethodId (optional)
     * @param bool|null $externalPayment externalPayment (optional, default to false)
     * @param float|null $paymentAmount paymentAmount (optional)
     * @param \DateTime|null $targetDate targetDate (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Invoice[]
     */
    public function payAllInvoices($accountId, $xKillbillCreatedBy, $paymentMethodId = null, $externalPayment = 'false', $paymentAmount = null, $targetDate = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->payAllInvoicesWithHttpInfo($accountId, $xKillbillCreatedBy, $paymentMethodId, $externalPayment, $paymentAmount, $targetDate, $pluginProperty, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation payAllInvoicesWithHttpInfo
     *
     * Trigger a payment for all unpaid invoices
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (optional)
     * @param bool $externalPayment (optional, default to false)
     * @param float $paymentAmount (optional)
     * @param \DateTime $targetDate (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payAllInvoicesWithHttpInfo($accountId, $xKillbillCreatedBy, $paymentMethodId = null, $externalPayment = 'false', $paymentAmount = null, $targetDate = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Invoice[]';
        $request = $this->payAllInvoicesRequest($accountId, $xKillbillCreatedBy, $paymentMethodId, $externalPayment, $paymentAmount, $targetDate, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payAllInvoicesAsync
     *
     * Trigger a payment for all unpaid invoices
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (optional)
     * @param bool $externalPayment (optional, default to false)
     * @param float $paymentAmount (optional)
     * @param \DateTime $targetDate (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payAllInvoicesAsync($accountId, $xKillbillCreatedBy, $paymentMethodId = null, $externalPayment = 'false', $paymentAmount = null, $targetDate = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->payAllInvoicesAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $paymentMethodId, $externalPayment, $paymentAmount, $targetDate, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payAllInvoicesAsyncWithHttpInfo
     *
     * Trigger a payment for all unpaid invoices
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (optional)
     * @param bool $externalPayment (optional, default to false)
     * @param float $paymentAmount (optional)
     * @param \DateTime $targetDate (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payAllInvoicesAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $paymentMethodId = null, $externalPayment = 'false', $paymentAmount = null, $targetDate = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Invoice[]';
        $request = $this->payAllInvoicesRequest($accountId, $xKillbillCreatedBy, $paymentMethodId, $externalPayment, $paymentAmount, $targetDate, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payAllInvoices'
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (optional)
     * @param bool $externalPayment (optional, default to false)
     * @param float $paymentAmount (optional)
     * @param \DateTime $targetDate (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payAllInvoicesRequest($accountId, $xKillbillCreatedBy, $paymentMethodId = null, $externalPayment = 'false', $paymentAmount = null, $targetDate = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling payAllInvoices'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling payAllInvoices'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/invoicePayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($paymentMethodId !== null) {
            $queryParams['paymentMethodId'] = ObjectSerializer::toQueryValue($paymentMethodId);
        }
        // query params
        if ($externalPayment !== null) {
            $queryParams['externalPayment'] = ObjectSerializer::toQueryValue($externalPayment);
        }
        // query params
        if ($paymentAmount !== null) {
            $queryParams['paymentAmount'] = ObjectSerializer::toQueryValue($paymentAmount);
        }
        // query params
        if ($targetDate !== null) {
            $queryParams['targetDate'] = ObjectSerializer::toQueryValue($targetDate);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processPayment
     *
     * Trigger a payment (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string|null $paymentMethodId paymentMethodId (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function processPayment($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->processPaymentWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation processPaymentWithHttpInfo
     *
     * Trigger a payment (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function processPaymentWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->processPaymentRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processPaymentAsync
     *
     * Trigger a payment (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processPaymentAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->processPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processPaymentAsyncWithHttpInfo
     *
     * Trigger a payment (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->processPaymentRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processPayment'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function processPaymentRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling processPayment'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling processPayment'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling processPayment'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($paymentMethodId !== null) {
            $queryParams['paymentMethodId'] = ObjectSerializer::toQueryValue($paymentMethodId);
        }
        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processPaymentByExternalKey
     *
     * Trigger a payment using the account external key (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $externalKey externalKey (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string|null $paymentMethodId paymentMethodId (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function processPaymentByExternalKey($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->processPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation processPaymentByExternalKeyWithHttpInfo
     *
     * Trigger a payment using the account external key (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $externalKey (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function processPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->processPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processPaymentByExternalKeyAsync
     *
     * Trigger a payment using the account external key (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $externalKey (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processPaymentByExternalKeyAsync($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->processPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processPaymentByExternalKeyAsyncWithHttpInfo
     *
     * Trigger a payment using the account external key (authorization, purchase or credit)
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $externalKey (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->processPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason, $xKillbillComment, $paymentMethodId, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processPaymentByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $externalKey (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string $paymentMethodId (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function processPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $externalKey, $xKillbillReason = null, $xKillbillComment = null, $paymentMethodId = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling processPaymentByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling processPaymentByExternalKey'
            );
        }
        // verify the required parameter 'externalKey' is set
        if ($externalKey === null || (is_array($externalKey) && count($externalKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalKey when calling processPaymentByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/accounts/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($externalKey !== null) {
            $queryParams['externalKey'] = ObjectSerializer::toQueryValue($externalKey);
        }
        // query params
        if ($paymentMethodId !== null) {
            $queryParams['paymentMethodId'] = ObjectSerializer::toQueryValue($paymentMethodId);
        }
        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rebalanceExistingCBAOnAccount
     *
     * Rebalance account CBA
     *
     * @param string $accountId accountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function rebalanceExistingCBAOnAccount($accountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->rebalanceExistingCBAOnAccountWithHttpInfo($accountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation rebalanceExistingCBAOnAccountWithHttpInfo
     *
     * Rebalance account CBA
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rebalanceExistingCBAOnAccountWithHttpInfo($accountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->rebalanceExistingCBAOnAccountRequest($accountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation rebalanceExistingCBAOnAccountAsync
     *
     * Rebalance account CBA
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rebalanceExistingCBAOnAccountAsync($accountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->rebalanceExistingCBAOnAccountAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rebalanceExistingCBAOnAccountAsyncWithHttpInfo
     *
     * Rebalance account CBA
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rebalanceExistingCBAOnAccountAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->rebalanceExistingCBAOnAccountRequest($accountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rebalanceExistingCBAOnAccount'
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function rebalanceExistingCBAOnAccountRequest($accountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling rebalanceExistingCBAOnAccount'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling rebalanceExistingCBAOnAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/cbaRebalancing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshPaymentMethods
     *
     * Refresh account payment methods
     *
     * @param string $accountId accountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $pluginName pluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refreshPaymentMethods($accountId, $xKillbillCreatedBy, $pluginName = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->refreshPaymentMethodsWithHttpInfo($accountId, $xKillbillCreatedBy, $pluginName, $pluginProperty, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation refreshPaymentMethodsWithHttpInfo
     *
     * Refresh account payment methods
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshPaymentMethodsWithHttpInfo($accountId, $xKillbillCreatedBy, $pluginName = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->refreshPaymentMethodsRequest($accountId, $xKillbillCreatedBy, $pluginName, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation refreshPaymentMethodsAsync
     *
     * Refresh account payment methods
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshPaymentMethodsAsync($accountId, $xKillbillCreatedBy, $pluginName = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->refreshPaymentMethodsAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $pluginName, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshPaymentMethodsAsyncWithHttpInfo
     *
     * Refresh account payment methods
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshPaymentMethodsAsyncWithHttpInfo($accountId, $xKillbillCreatedBy, $pluginName = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->refreshPaymentMethodsRequest($accountId, $xKillbillCreatedBy, $pluginName, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshPaymentMethods'
     *
     * @param string $accountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refreshPaymentMethodsRequest($accountId, $xKillbillCreatedBy, $pluginName = null, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling refreshPaymentMethods'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling refreshPaymentMethods'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/paymentMethods/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pluginName !== null) {
            $queryParams['pluginName'] = ObjectSerializer::toQueryValue($pluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeEmail
     *
     * Delete email from account
     *
     * @param string $accountId accountId (required)
     * @param string $email email (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeEmail($accountId, $email, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->removeEmailWithHttpInfo($accountId, $email, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation removeEmailWithHttpInfo
     *
     * Delete email from account
     *
     * @param string $accountId (required)
     * @param string $email (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeEmailWithHttpInfo($accountId, $email, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->removeEmailRequest($accountId, $email, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeEmailAsync
     *
     * Delete email from account
     *
     * @param string $accountId (required)
     * @param string $email (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeEmailAsync($accountId, $email, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->removeEmailAsyncWithHttpInfo($accountId, $email, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeEmailAsyncWithHttpInfo
     *
     * Delete email from account
     *
     * @param string $accountId (required)
     * @param string $email (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeEmailAsyncWithHttpInfo($accountId, $email, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->removeEmailRequest($accountId, $email, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeEmail'
     *
     * @param string $accountId (required)
     * @param string $email (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeEmailRequest($accountId, $email, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling removeEmail'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling removeEmail'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling removeEmail'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/emails/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAccounts
     *
     * Search accounts
     *
     * @param string $searchKey searchKey (required)
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param bool|null $accountWithBalance accountWithBalance (optional, default to false)
     * @param bool|null $accountWithBalanceAndCBA accountWithBalanceAndCBA (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Account[]
     */
    public function searchAccounts($searchKey, $offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        list($response) = $this->searchAccountsWithHttpInfo($searchKey, $offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit);
        return $response;
    }

    /**
     * Operation searchAccountsWithHttpInfo
     *
     * Search accounts
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAccountsWithHttpInfo($searchKey, $offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account[]';
        $request = $this->searchAccountsRequest($searchKey, $offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Account[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAccountsAsync
     *
     * Search accounts
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAccountsAsync($searchKey, $offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        return $this->searchAccountsAsyncWithHttpInfo($searchKey, $offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAccountsAsyncWithHttpInfo
     *
     * Search accounts
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAccountsAsyncWithHttpInfo($searchKey, $offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Account[]';
        $request = $this->searchAccountsRequest($searchKey, $offset, $limit, $accountWithBalance, $accountWithBalanceAndCBA, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAccounts'
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $accountWithBalance (optional, default to false)
     * @param bool $accountWithBalanceAndCBA (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchAccountsRequest($searchKey, $offset = '0', $limit = '100', $accountWithBalance = 'false', $accountWithBalanceAndCBA = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'searchKey' is set
        if ($searchKey === null || (is_array($searchKey) && count($searchKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $searchKey when calling searchAccounts'
            );
        }

        $resourcePath = '/1.0/kb/accounts/search/{searchKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($accountWithBalance !== null) {
            $queryParams['accountWithBalance'] = ObjectSerializer::toQueryValue($accountWithBalance);
        }
        // query params
        if ($accountWithBalanceAndCBA !== null) {
            $queryParams['accountWithBalanceAndCBA'] = ObjectSerializer::toQueryValue($accountWithBalanceAndCBA);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($searchKey !== null) {
            $resourcePath = str_replace(
                '{' . 'searchKey' . '}',
                ObjectSerializer::toPathValue($searchKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setDefaultPaymentMethod
     *
     * Set the default payment method
     *
     * @param string $accountId accountId (required)
     * @param string $paymentMethodId paymentMethodId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param bool|null $payAllUnpaidInvoices payAllUnpaidInvoices (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setDefaultPaymentMethod($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->setDefaultPaymentMethodWithHttpInfo($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices, $pluginProperty, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation setDefaultPaymentMethodWithHttpInfo
     *
     * Set the default payment method
     *
     * @param string $accountId (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setDefaultPaymentMethodWithHttpInfo($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->setDefaultPaymentMethodRequest($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setDefaultPaymentMethodAsync
     *
     * Set the default payment method
     *
     * @param string $accountId (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultPaymentMethodAsync($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->setDefaultPaymentMethodAsyncWithHttpInfo($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setDefaultPaymentMethodAsyncWithHttpInfo
     *
     * Set the default payment method
     *
     * @param string $accountId (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setDefaultPaymentMethodAsyncWithHttpInfo($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->setDefaultPaymentMethodRequest($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setDefaultPaymentMethod'
     *
     * @param string $accountId (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $payAllUnpaidInvoices (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setDefaultPaymentMethodRequest($accountId, $paymentMethodId, $xKillbillCreatedBy, $payAllUnpaidInvoices = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling setDefaultPaymentMethod'
            );
        }
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling setDefaultPaymentMethod'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling setDefaultPaymentMethod'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}/paymentMethods/{paymentMethodId}/setDefault';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($payAllUnpaidInvoices !== null) {
            $queryParams['payAllUnpaidInvoices'] = ObjectSerializer::toQueryValue($payAllUnpaidInvoices);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferChildCreditToParent
     *
     * Move a given child credit to the parent level
     *
     * @param string $childAccountId childAccountId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function transferChildCreditToParent($childAccountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->transferChildCreditToParentWithHttpInfo($childAccountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation transferChildCreditToParentWithHttpInfo
     *
     * Move a given child credit to the parent level
     *
     * @param string $childAccountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferChildCreditToParentWithHttpInfo($childAccountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->transferChildCreditToParentRequest($childAccountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation transferChildCreditToParentAsync
     *
     * Move a given child credit to the parent level
     *
     * @param string $childAccountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferChildCreditToParentAsync($childAccountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->transferChildCreditToParentAsyncWithHttpInfo($childAccountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferChildCreditToParentAsyncWithHttpInfo
     *
     * Move a given child credit to the parent level
     *
     * @param string $childAccountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferChildCreditToParentAsyncWithHttpInfo($childAccountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->transferChildCreditToParentRequest($childAccountId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferChildCreditToParent'
     *
     * @param string $childAccountId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transferChildCreditToParentRequest($childAccountId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'childAccountId' is set
        if ($childAccountId === null || (is_array($childAccountId) && count($childAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $childAccountId when calling transferChildCreditToParent'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling transferChildCreditToParent'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{childAccountId}/transferCredit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($childAccountId !== null) {
            $resourcePath = str_replace(
                '{' . 'childAccountId' . '}',
                ObjectSerializer::toPathValue($childAccountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccount
     *
     * Update account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $accountId accountId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param bool|null $treatNullAsReset treatNullAsReset (optional, default to false)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAccount($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $treatNullAsReset = 'false')
    {
        $this->updateAccountWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $treatNullAsReset);
    }

    /**
     * Operation updateAccountWithHttpInfo
     *
     * Update account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $treatNullAsReset (optional, default to false)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $treatNullAsReset = 'false')
    {
        $returnType = null;
        $request = $this->updateAccountRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $treatNullAsReset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountAsync
     *
     * Update account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $treatNullAsReset (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountAsync($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $treatNullAsReset = 'false')
    {
        return $this->updateAccountAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $treatNullAsReset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountAsyncWithHttpInfo
     *
     * Update account
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $treatNullAsReset (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountAsyncWithHttpInfo($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $treatNullAsReset = 'false')
    {
        $returnType = null;
        $request = $this->updateAccountRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason, $xKillbillComment, $treatNullAsReset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccount'
     *
     * @param \Killbill\Client\Swagger\Model\Account $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $accountId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param bool $treatNullAsReset (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAccountRequest($body, $xKillbillCreatedBy, $accountId, $xKillbillReason = null, $xKillbillComment = null, $treatNullAsReset = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAccount'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling updateAccount'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling updateAccount'
            );
        }

        $resourcePath = '/1.0/kb/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($treatNullAsReset !== null) {
            $queryParams['treatNullAsReset'] = ObjectSerializer::toQueryValue($treatNullAsReset);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\Utils::jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
    
    /**
     * Response handler
     *
     * @param Request  $request    Request
     * @param Response $response   Response
     * @param string   $returnType Return type
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @return array of returned object matching type, HTTP status code, HTTP response headers (array of strings)
     */
    protected function handleResponse($request, $response, $returnType)
    {
        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        if ($statusCode === 201 && $response->hasHeader('Location')) {
            // This is a Created redirection, getting the object from the location target
            $location = $response->getHeader('Location')[0];

            if (strpos($location, $this->config->getHost()) !== 0) {
                throw new ApiException(
                    sprintf(
                        '[%d] Received a location header not matching the configured host (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $options = $this->createHttpClientOption();
            $locationRequest = new Request(
                'GET',
                $location,
                $request->getHeaders()
            );
            $locationResponse = $this->client->send($locationRequest, $options);

            $responseBody = $locationResponse->getBody();
        } else {
            $responseBody = $response->getBody();
        }

        if ($returnType === null || $returnType === '') {
            $returnedObject = null;
        } else {
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            $returnedObject = ObjectSerializer::deserialize($content, $returnType, []);
        }

        return [
            $returnedObject,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }
}
